{
  Description:
  ----------------------------------------------------------------------------
  Creating the project's folder structure, copying the Driver and creating
  the json files for Visual Studio Code.

  The following requirements have to be met:
  1.- the toolchain folder must be in your home folder
  2.- the workspace folder must be in your home folder
  3.- the SPL driver folder must be in your workspace folder
  4.- the Visual Pin Configurator folder must be in your workspace folder
  5.- the STM32L151.svd file must be copied in the workspace folder

  like below:

  [your_home_folder]
   |
   +-[gcc-arm] <- toolchain folder
   \-[vsc_stm32l1_projects]  <- your workspace folder
       |
       +-[spl_library] <- your library container (lcd4.h, onewire1.h, ds18b20.h, etc)
       +-[spl_project_example] <- project folder generated by vpc
       |  |
       |  +.
       |  +..
       |  +-[.vscode]
       |  +-[Driver]
       |  +-[Inc]
       |  +-[Src]
       |  +-Makefile
       |  +-STM32L152RE.ld
       |  +-STM32L152RE.s
       |  \-spl_project_example.vpc <- the project file
       |
       +-[STM32L1xx_StdPeriph_Lib_V1.3.1] <- SPL driver for STM32L1
       +-[vpc] <- folder of the Visual Pin Configurator
       \-STM32L151.svd <- file used by the Cortex-Debug VScode extension.

  ----------------------------------------------------------------------------
  Copyright (c) <2018> <Vasile Guta-Ciucur>

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
}

program test;
uses
sysutils;
const
  v_spl_driver = 'STM32L1xx_StdPeriph_Lib_V1.3.1';
  v_ld_file = 'STM32L152RE.ld';
  v_startup_file = 'STM32L152RE.s';
  v_vsc_tasks_file = 'tasks.json';
  v_vsc_c_prop_file = 'c_cpp_properties.json';
  v_vsc_settings_file = 'settings.json';
  v_vsc_launch_file = 'launch.json';
  v_designer_folder = 'vpc';
var
  v_workspace, v_prj_name, v_user_lib_folder, v_toolchain_folder, sf:string;
  _fsearch: TSearchRec;
  s : AnsiString;
  F, G: Text;
begin
  {some test values}
  v_workspace:='vsc_stm32l1_projects';
  v_prj_name:='spl_vasi_testing';
  v_user_lib_folder:='spl_library';
  v_toolchain_folder:='gcc-arm';
  writeln('Watchout! Newbie here!');
  {$I-}
  chdir(getenvironmentvariable('HOME'));
  if(DirectoryExists(v_workspace) = FALSE) then begin
    writeln('Error! The workspace folder does NOT exist!');
    halt(1);
  end;
  chdir(v_workspace);
  if(DirectoryExists(v_prj_name)) then begin
    writeln('Error! The project already exist!');
    halt(1);
  end;
  mkdir(v_prj_name);
  chdir(v_prj_name);
  mkdir('.vscode');
  mkdir('Inc');
  mkdir('Src');
  mkdir('Drivers');
  {creating STM32L152RETx_FLASH.ld file in the root folder of the project}
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/'+v_ld_file);
  rewrite(F);
  writeln(F, 'ENTRY(Reset_Handler)');
  writeln(F, '_estack = 0x20014000;');
  writeln(F, '_Min_Heap_Size = 0x200;');
  writeln(F, '_Min_Stack_Size = 0x400;');
  writeln(F, 'MEMORY');
  writeln(F, '{');
  writeln(F, 'RAM (xrw)      : ORIGIN = 0x20000000, LENGTH = 80K');
  writeln(F, 'FLASH (rx)      : ORIGIN = 0x8000000, LENGTH = 512K');
  writeln(F, '}');
  writeln(F, 'SECTIONS');
  writeln(F, '{');
  writeln(F, '  .isr_vector :');
  writeln(F, '  {');
  writeln(F, '    . = ALIGN(4);');
  writeln(F, '    KEEP(*(.isr_vector)) ');
  writeln(F, '    . = ALIGN(4);');
  writeln(F, '  } >FLASH');
  writeln(F, ' ');
  writeln(F, '  .text :');
  writeln(F, '  {');
  writeln(F, '    . = ALIGN(4);');
  writeln(F, '    *(.text)');
  writeln(F, '    *(.text*)');
  writeln(F, '    *(.glue_7)');
  writeln(F, '    *(.glue_7t)');
  writeln(F, '    *(.eh_frame)');
  writeln(F, ' ');
  writeln(F, '    KEEP (*(.init))');
  writeln(F, '    KEEP (*(.fini))');
  writeln(F, ' ');
  writeln(F, '    . = ALIGN(4);');
  writeln(F, '    _etext = .;');
  writeln(F, '  } >FLASH');
  writeln(F, ' ');
  writeln(F, '  .rodata :');
  writeln(F, '  {');
  writeln(F, '    . = ALIGN(4);');
  writeln(F, '    *(.rodata)');
  writeln(F, '    *(.rodata*)');
  writeln(F, '    . = ALIGN(4);');
  writeln(F, '  } >FLASH');
  writeln(F, ' ');
  writeln(F, '  .ARM.extab   : { *(.ARM.extab* .gnu.linkonce.armextab.*) } >FLASH');
  writeln(F, '  .ARM : {');
  writeln(F, '    __exidx_start = .;');
  writeln(F, '    *(.ARM.exidx*)');
  writeln(F, '    __exidx_end = .;');
  writeln(F, '  } >FLASH');
  writeln(F, ' ');
  writeln(F, '  .preinit_array     :');
  writeln(F, '  {');
  writeln(F, '    PROVIDE_HIDDEN (__preinit_array_start = .);');
  writeln(F, '    KEEP (*(.preinit_array*))');
  writeln(F, '    PROVIDE_HIDDEN (__preinit_array_end = .);');
  writeln(F, '  } >FLASH');
  writeln(F, '  .init_array :');
  writeln(F, '  {');
  writeln(F, '    PROVIDE_HIDDEN (__init_array_start = .);');
  writeln(F, '    KEEP (*(SORT(.init_array.*)))');
  writeln(F, '    KEEP (*(.init_array*))');
  writeln(F, '    PROVIDE_HIDDEN (__init_array_end = .);');
  writeln(F, '  } >FLASH');
  writeln(F, '  .fini_array :');
  writeln(F, '  {');
  writeln(F, '    PROVIDE_HIDDEN (__fini_array_start = .);');
  writeln(F, '    KEEP (*(SORT(.fini_array.*)))');
  writeln(F, '    KEEP (*(.fini_array*))');
  writeln(F, '    PROVIDE_HIDDEN (__fini_array_end = .);');
  writeln(F, '  } >FLASH');
  writeln(F, ' ');
  writeln(F, '  _sidata = LOADADDR(.data);');
  writeln(F, ' ');
  writeln(F, '  .data : ');
  writeln(F, '  {');
  writeln(F, '    . = ALIGN(4);');
  writeln(F, '    _sdata = .;');
  writeln(F, '    *(.data)');
  writeln(F, '    *(.data*)');
  writeln(F, ' ');
  writeln(F, '    . = ALIGN(4);');
  writeln(F, '    _edata = .;');
  writeln(F, '  } >RAM AT> FLASH');
  writeln(F, ' ');
  writeln(F, '  . = ALIGN(4);');
  writeln(F, '  .bss :');
  writeln(F, '  {');
  writeln(F, '    _sbss = .;');
  writeln(F, '    __bss_start__ = _sbss;');
  writeln(F, '    *(.bss)');
  writeln(F, '    *(.bss*)');
  writeln(F, '    *(COMMON)');
  writeln(F, ' ');
  writeln(F, '    . = ALIGN(4);');
  writeln(F, '    _ebss = .;');
  writeln(F, '    __bss_end__ = _ebss;');
  writeln(F, '  } >RAM');
  writeln(F, ' ');
  writeln(F, '  ._user_heap_stack :');
  writeln(F, '  {');
  writeln(F, '    . = ALIGN(8);');
  writeln(F, '    PROVIDE ( end = . );');
  writeln(F, '    PROVIDE ( _end = . );');
  writeln(F, '    . = . + _Min_Heap_Size;');
  writeln(F, '    . = . + _Min_Stack_Size;');
  writeln(F, '    . = ALIGN(8);');
  writeln(F, '  } >RAM');
  writeln(F, ' ');
  writeln(F, '  /DISCARD/ :');
  writeln(F, '  {');
  writeln(F, '    libc.a ( * )');
  writeln(F, '    libm.a ( * )');
  writeln(F, '    libgcc.a ( * )');
  writeln(F, '  }');
  writeln(F, ' ');
  writeln(F, '  .ARM.attributes 0 : { *(.ARM.attributes) }');
  writeln(F, '}');
  writeln(F, ' ');
  writeln(F, ' ');
  writeln(F, ' ');
  close(F);
  {create tasks.json file in .vscode folder}
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/.vscode/'+v_vsc_tasks_file);
  rewrite(F);
  writeln(F,  '{');
  writeln(F,  '    "version": "2.0.0",');
  writeln(F,  '    "tasks": [');
  writeln(F,  '        {');
  writeln(F,  '            "label": "make",');
  writeln(F,  '            "type": "shell",');
  writeln(F,  '            "command": "make",');
  writeln(F,  '            "group": {');
  writeln(F,  '                "kind": "build",');
  writeln(F,  '                "isDefault": true');
  writeln(F,  '            },');
  writeln(F,  '            "problemMatcher": []');
  writeln(F,  '        },');
  writeln(F,  '        {');
  writeln(F,  '            "label": "upload",');
  writeln(F,  '            "type": "shell",');
  writeln(F,  '            "command": "st-flash write ${workspaceFolder}/build/${workspaceFolderBasename}.bin 0x08000000",');
  writeln(F,  '            "group": {');
  writeln(F,  '                "kind": "build",');
  writeln(F,  '                "isDefault": true');
  writeln(F,  '            },');
  writeln(F,  '            "problemMatcher": []');
  writeln(F,  '        },');
  writeln(F,  '        {');
  writeln(F,  '            "label": "make clean",');
  writeln(F,  '            "type": "shell",');
  writeln(F,  '            "command": "make clean",');
  writeln(F,  '            "group": {');
  writeln(F,  '                "kind": "build",');
  writeln(F,  '                "isDefault": true');
  writeln(F,  '            },');
  writeln(F,  '            "problemMatcher": []');
  writeln(F,  '        }');
  writeln(F,  '    ]');
  writeln(F,  '}');
  writeln(F,  ' ');
  close(F);
  {create settings.json file in .vscode folder}
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/.vscode/'+v_vsc_settings_file);
  rewrite(F);
  writeln(F,  '{');
  writeln(F,  '    "C_Cpp.intelliSenseEngineFallback": "Enabled",');
  writeln(F,  '    "C_Cpp.errorSquiggles": "Disabled"');
  writeln(F,  '}');
  writeln(F,  ' ');
  close(F);

  {lets look a little at the toolchain folder structure - we need something
   from there.}
  chdir(getenvironmentvariable('HOME'));
  chdir(v_toolchain_folder+'/lib/gcc/arm-none-eabi');

  {good, now lets see the name of the subfolder in here which is composed of
   numbers and dots, in this format "x.x.x"}
  if(FindFirst('*',faDirectory, _fsearch) <> 0) then begin
    writeln('Error! We are not in the folder we should be...');
    halt(1);
  end;
  sf := _fsearch.Name;
  writeln('Ok, the gcc-arm subfolder is: '+sf);

  {Now that we have done gazing into gcc-arm subfolders, lets go back to our
   project folder ...}
  chdir(getenvironmentvariable('HOME'));
  chdir(v_workspace+'/'+v_prj_name);


  {... and lets use the "sf" in the constructed gcc-arm path:
   create c_cpp_properties.json file in .vscode folder}
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/.vscode/'+v_vsc_c_prop_file);
  rewrite(F);
  writeln(F,  '{');
  writeln(F,  '    "configurations": [');
  writeln(F,  '        {');
  writeln(F,  '            "name": "Linux",');
  writeln(F,  '            "intelliSenseMode": "clang-x64",');
  writeln(F,  '            "defines":[');
  writeln(F,  '                "STM32L1XX_XL",');
  writeln(F,  '                "USE_STDPERIPH_DRIVER"');
  writeln(F,  '            ],');
  writeln(F,  '            "includePath": [');
  writeln(F,  '                "${workspaceRoot}/Inc",');
  writeln(F,  '                "${workspaceRoot}/Drivers/CMSIS/Include",');
  writeln(F,  '                "${workspaceRoot}/Drivers/CMSIS/Device/Include",');
  writeln(F,  '                "${workspaceRoot}/Drivers/STM32L1xx_StdPeriph_Driver/Inc",');
  writeln(F,  '                "${env:HOME}/'+v_toolchain_folder+'/arm-none-eabi/include",');
  writeln(F,  '                "${env:HOME}/'+v_toolchain_folder+'/lib/gcc/arm-none-eabi/'+sf+'/include",');
  writeln(F,  '                "${env:HOME}/'+v_toolchain_folder+'/lib/gcc/arm-none-eabi/'+sf+'/include-fixed",');
  writeln(F,  '                "${env:HOME}/'+v_workspace+'/'+v_user_lib_folder+'"');
  writeln(F,  '            ],');
  writeln(F,  '            "browse": {');
  writeln(F,  '                "path": [');
  writeln(F,  '                    "${workspaceRoot}/Inc",');
  writeln(F,  '                    "${workspaceRoot}/Drivers/CMSIS/Include",');
  writeln(F,  '                    "${workspaceRoot}/Drivers/CMSIS/Device/Include",');
  writeln(F,  '                    "${workspaceRoot}/Drivers/STM32L1xx_StdPeriph_Driver/Inc",');
  writeln(F,  '                    "${env:HOME}/'+v_toolchain_folder+'/arm-none-eabi/include",');
  writeln(F,  '                    "${env:HOME}/'+v_toolchain_folder+'/lib/gcc/arm-none-eabi/'+sf+'/include",');
  writeln(F,  '                    "${env:HOME}/'+v_toolchain_folder+'/lib/gcc/arm-none-eabi/'+sf+'/include-fixed",');
  writeln(F,  '                    "${env:HOME}/'+v_workspace+'/'+v_user_lib_folder+'"');
  writeln(F,  '                ],');
  writeln(F,  '                "limitSymbolsToIncludedHeaders": false,');
  writeln(F,  '                "databaseFilename": ""');
  writeln(F,  '            }');
  writeln(F,  '        }');
  writeln(F,  '    ],');
  writeln(F,  '    "version": 3');
  writeln(F,  '}');
  writeln(F,  ' ');
  close(F);

  {create launch.json file in .vscode folder}
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/.vscode/'+v_vsc_launch_file);
  rewrite(F);
  writeln(F,  '{');
  writeln(F,  '    "version": "0.2.0",');
  writeln(F,  '    "configurations": [');
  writeln(F,  '        {');
  writeln(F,  '            "type": "cortex-debug",');
  writeln(F,  '            "request": "launch",');
  writeln(F,  '            "servertype": "openocd",');
  writeln(F,  '            "cwd": "${workspaceRoot}",');
  writeln(F,  '            "executable": "./build/'+v_prj_name+'.elf",');
  writeln(F,  '            "name": "Debug (OpenOCD)",');
  writeln(F,  '            "device": "STM32L152RE",');
  writeln(F,  '            "configFiles": [');
  writeln(F,  '                "board/st_nucleo_l1.cfg"');
  writeln(F,  '            ],');
  writeln(F,  '            "svdFile": "${env:HOME}/'+v_workspace+'/STM32L151.svd"');
  writeln(F,  '        }');
  writeln(F,  '    ]');
  writeln(F,  '}');
  writeln(F,  ' ');
  close(F);

  {lets continue with the rest of the subfolders...
  remember, from last chdir, we still are inside the project main folder
  that is stored inside v_prj_name variable, so we will try to create them without
  changing the current folder again - just to learn if that is possible}
  mkdir('Drivers/STM32L1xx_StdPeriph_Driver');
  mkdir('Drivers/STM32L1xx_StdPeriph_Driver/Inc');
  mkdir('Drivers/STM32L1xx_StdPeriph_Driver/Src');
  mkdir('Drivers/CMSIS');
  mkdir('Drivers/CMSIS/Device');
  mkdir('Drivers/CMSIS/Device/Include');
  mkdir('Drivers/CMSIS/Device/Source');
  mkdir('Drivers/CMSIS/Device/Source/Templates');
  mkdir('Drivers/CMSIS/Include');
  {... aaaand is possible - perfect!}

  {copy the CMSIS and SPL drivers in a cross-platform compatible.
  if I didn't mentioned yet, this app is placed in "vpc" subfolder
  which is in the workspace main folder (initially named vsc_stm32l1_projects).
  so if the paths are preserved, then the app knows where to look for the files}

  {============================}
  { CMSIS DEVICE - STARTUP FILE}
  {----------------------------}
  {1. startup_stm32l1xx_xl.s}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Device/ST/STM32L1xx/Source/Templates/TrueSTUDIO/startup_stm32l1xx_xl.s');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'startup_stm32l1xx_xl.s'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/'+v_startup_file);
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {=======================}
  { CMSIS DEVICE - 2 files}
  {-----------------------}
  {1. stm32l1xx.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Device/Include/stm32l1xx.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {2. system_stm32l1xx.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'system_stm32l1xx.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Device/Include/system_stm32l1xx.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {=========================}
  { CMSIS INCLUDE - 12 files}
  {-------------------------}
  {1. arm_common_tables.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Include/arm_common_tables.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'arm_common_tables.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Include/arm_common_tables.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {2. arm_const_structs.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Include/arm_const_structs.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'arm_const_structs.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Include/arm_const_structs.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {3. arm_math.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Include/arm_math.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'arm_math.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Include/arm_math.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {4. core_cm0.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Include/core_cm0.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'core_cm0.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Include/core_cm0.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {5. core_cm0plus.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Include/core_cm0plus.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'core_cm0plus.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Include/core_cm0plus.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {6. core_cm3.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Include/core_cm3.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'core_cm3.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Include/core_cm3.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {7. core_cm4.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Include/core_cm4.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'core_cm4.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Include/core_cm4.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {8. core_cm4_simd.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Include/core_cm4_simd.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'core_cm4_simd.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Include/core_cm4_simd.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {9. core_cmFunc.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Include/core_cmFunc.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'core_cmFunc.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Include/core_cmFunc.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {10. core_cmInstr.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Include/core_cmInstr.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'core_cmInstr.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Include/core_cmInstr.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {11. core_sc000.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Include/core_sc000.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'core_sc000.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Include/core_sc000.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {12. core_sc300.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/CMSIS/Include/core_sc300.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'core_sc300.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/CMSIS/Include/core_sc300.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {===========================}
  { STM32L1 SPL INC - 25 files}
  {---------------------------}
  {1. misc.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/misc.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'misc.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/misc.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {2. stm32l1xx_adc.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_adc.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_adc.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_adc.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {3. stm32l1xx_aes.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_aes.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_aes.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_aes.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {4. stm32l1xx_comp.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_comp.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_comp.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_comp.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {5. stm32l1xx_crc.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_crc.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_crc.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_crc.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {6. stm32l1xx_dac.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_dac.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_dac.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_dac.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {7. stm32l1xx_dbgmcu.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_dbgmcu.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_dbgmcu.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_dbgmcu.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {8. stm32l1xx_dma.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_dma.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_dma.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_dma.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {9. stm32l1xx_exti.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_exti.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_exti.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_exti.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {10. stm32l1xx_flash.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_flash.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_flash.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_flash.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {11. stm32l1xx_fsmc.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_fsmc.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_fsmc.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_fsmc.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {12. stm32l1xx_gpio.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_gpio.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_gpio.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_gpio.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {13. stm32l1xx_i2c.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_i2c.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_i2c.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_i2c.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {14. stm32l1xx_iwdg.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_iwdg.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_iwdg.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_iwdg.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {15. stm32l1xx_lcd.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_lcd.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_lcd.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_lcd.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {16. stm32l1xx_opamp.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_opamp.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_opamp.h}'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_opamp.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {17. stm32l1xx_pwr.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_pwr.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_pwr.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_pwr.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {18. stm32l1xx_rcc.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_rcc.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_rcc.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_rcc.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {19. stm32l1xx_rtc.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_rtc.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_rtc.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_rtc.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {20. stm32l1xx_sdio.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_sdio.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_sdio.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_sdio.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {21. stm32l1xx_spi.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_spi.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_spi.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_spi.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {22. stm32l1xx_syscfg.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_syscfg.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_syscfg.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_syscfg.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {23. stm32l1xx_tim.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_tim.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_tim.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_tim.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {24. stm32l1xx_usart.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_usart.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_usart.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_usart.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {25. stm32l1xx_wwdg.h}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_wwdg.h');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_wwdg.h'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Inc/stm32l1xx_wwdg.h');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {==========================}
  { STM32L1 LL SRC - 27 files}
  {--------------------------}
  {1. misc.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/misc.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'misc.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/misc.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {2. stm32l1xx_adc.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_adc.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_adc.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_adc.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {3. stm32l1xx_aes.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_aes.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_aes.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_aes.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {27. stm32l1xx_aes_util.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_aes_util.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_aes_util.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_aes_util.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {4. stm32l1xx_comp.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_comp.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_comp.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_comp.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {5. stm32l1xx_crc.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_crc.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_crc.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_crc.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {6. stm32l1xx_dac.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_dac.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_dac.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_dac.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {7. stm32l1xx_dbgmcu.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_dbgmcu.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_dbgmcu.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_dbgmcu.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {8. stm32l1xx_dma.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_dma.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_dma.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_dma.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {9. stm32l1xx_exti.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_exti.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_exti.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_exti.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {10. stm32l1xx_flash.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_flash.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_flash.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_flash.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {11. stm32l1xx_flash_ramfunc.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_flash_ramfunc.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_flash_ramfunc.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_flash_ramfunc.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {12. stm32l1xx_fsmc.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_fsmc.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_fsmc.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_fsmc.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {13. stm32l1xx_gpio.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_gpio.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_gpio.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_gpio.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {14. stm32l1xx_i2c.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_i2c.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_i2c.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_i2c.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {15. stm32l1xx_iwdg.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_iwdg.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_iwdg.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_iwdg.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {16. stm32l1xx_lcd.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_lcd.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_lcd.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_lcd.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {17. stm32l1xx_opamp.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_opamp.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_opamp.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_opamp.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {18. stm32l1xx_pwr.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_pwr.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_pwr.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_pwr.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {19. stm32l1xx_rcc.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_rcc.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_rcc.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_rcc.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {20. stm32l1xx_rtc.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_rtc.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_rtc.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_rtc.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {21. stm32l1xx_sdio.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_sdio.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_sdio.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_sdio.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {22. stm32l1xx_spi.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_spi.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_spi.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_spi.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {23. stm32l1xx_syscfg.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_syscfg.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_syscfg.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_syscfg.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {24. stm32l1xx_tim.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_tim.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_tim.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_tim.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {25. stm32l1xx_usart.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_usart.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_usart.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_usart.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);

  {26. stm32l1xx_wwdg.c}
  assign(G, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_spl_driver+'/Libraries/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_wwdg.c');
  reset(G);
  If IOresult <> 0 then begin
    writeln('Error! The file '+'stm32l1xx_wwdg.c'+' is not here!');
    halt(1);
  end;
  assign(F, getenvironmentvariable('HOME')+'/'+v_workspace+'/'+v_prj_name+'/Drivers/STM32L1xx_StdPeriph_Driver/Src/stm32l1xx_wwdg.c');
  rewrite(F);
  repeat
    readln(G, s);
    writeln(F, s);
  until eof(G);
  close(F);
  close(G);


{==================================================}


  writeln('Done! Now, lets check what we have done!');

end.

